import { defineConfig } from "eslint/config"
import { isInEditor } from "../constants.js"

export function javascript() {
    return defineConfig({
        rules: {
            "accessor-pairs": ["error", { enforceForClassMembers: true, setWithoutGet: true }],
            "array-callback-return": "error",
            "block-scoped-var": "error",
            "default-case-last": "error",
            "eqeqeq": ["error", "smart"],
            "new-cap": ["error", { capIsNew: false, newIsCap: true, properties: true }],
            "no-alert": "error",
            "no-async-promise-executor": "error",
            "no-caller": "error",
            "no-case-declarations": "error",
            "no-compare-neg-zero": "error",
            "no-cond-assign": ["error", "always"],
            "no-console": ["error", { allow: ["warn", "error"] }],
            "no-control-regex": "error",
            "no-debugger": "error",
            "no-delete-var": "error",
            "no-duplicate-case": "error",
            "no-empty": ["error", { allowEmptyCatch: true }],
            "no-empty-character-class": "error",
            "no-empty-pattern": "error",
            "no-eval": "error",
            "no-ex-assign": "error",
            "no-extend-native": "error",
            "no-extra-bind": "error",
            "no-extra-boolean-cast": "error",
            "no-fallthrough": "error",
            "no-global-assign": "error",
            "no-implied-eval": "error",
            "no-invalid-regexp": "error",
            "no-irregular-whitespace": "error",
            "no-iterator": "error",
            "no-labels": ["error", { allowLoop: false, allowSwitch: false }],
            "no-lone-blocks": "error",
            "no-loss-of-precision": "error",
            "no-misleading-character-class": "error",
            "no-multi-str": "error",
            "no-new": "error",
            "no-new-func": "error",
            "no-new-wrappers": "error",
            "no-octal": "error",
            "no-octal-escape": "error",
            "no-proto": "error",
            "no-prototype-builtins": "error",
            "no-regex-spaces": "error",
            "no-restricted-globals": [
                "error",
                { message: "Use `globalThis` instead.", name: "global" },
                { message: "Use `globalThis` instead.", name: "self" },
            ],
            "no-restricted-properties": [
                "error",
                { message: "Use `Object.getPrototypeOf` or `Object.setPrototypeOf` instead.", property: "__proto__" },
                { message: "Use `Object.defineProperty` instead.", property: "__defineGetter__" },
                { message: "Use `Object.defineProperty` instead.", property: "__defineSetter__" },
                { message: "Use `Object.getOwnPropertyDescriptor` instead.", property: "__lookupGetter__" },
                { message: "Use `Object.getOwnPropertyDescriptor` instead.", property: "__lookupSetter__" },
            ],
            "no-restricted-syntax": [
                "error",
                "TSEnumDeclaration[const=true]",
                "TSExportAssignment",
            ],
            "no-self-assign": ["error", { props: true }],
            "no-self-compare": "error",
            "no-sequences": "error",
            "no-shadow-restricted-names": "error",
            "no-sparse-arrays": "error",
            "no-template-curly-in-string": "error",
            "no-throw-literal": "error",
            "no-undef-init": "error",
            "no-unexpected-multiline": "error",
            "no-unmodified-loop-condition": "error",
            "no-unneeded-ternary": ["error", { defaultAssignment: false }],
            "no-unreachable-loop": "error",
            "no-unsafe-finally": "error",
            "no-useless-backreference": "error",
            "no-useless-call": "error",
            "no-useless-catch": "error",
            "no-useless-computed-key": "error",
            "no-useless-rename": "error",
            "no-useless-return": "error",
            "object-shorthand": [
                "error",
                "always",
                {
                    avoidQuotes: true,
                    ignoreConstructors: false,
                },
            ],
            "one-var": ["error", { initialized: "never" }],
            "prefer-arrow-callback": [
                "error",
                {
                    allowNamedFunctions: false,
                    allowUnboundThis: true,
                },
            ],
            "prefer-const": [
                isInEditor ? "warn" : "error",
                {
                    destructuring: "all",
                    ignoreReadBeforeAssign: true,
                },
            ],
            "prefer-exponentiation-operator": "error",
            "prefer-promise-reject-errors": "error",
            "prefer-regex-literals": ["error", { disallowRedundantWrapping: true }],
            "prefer-template": "error",
            "symbol-description": "error",
            "unicode-bom": ["error", "never"],
            "use-isnan": ["error", { enforceForIndexOf: true, enforceForSwitchCase: true }],
            "valid-typeof": ["error", { requireStringLiterals: true }],
            "vars-on-top": "error",
            "yoda": ["error", "never"],
        },
    })
}
